# Generated by Django 3.2.15 on 2022-09-04 00:47

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Alias',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alias', models.CharField(max_length=80)),
            ],
            options={
                'ordering': ['alias'],
            },
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the the article.', max_length=100)),
                ('author', models.CharField(help_text='Author(s) of the article. Slash separated.', max_length=50)),
                ('category', models.CharField(choices=[('Bugs And Glitches', 'Bugs And Glitches'), ('Closer Look', 'Closer Look'), ('Contest', 'Contest'), ('Featured Game', 'Featured Game'), ('Help', 'Help'), ('Historical', 'Historical'), ('Interview', 'Interview'), ("Let's Play", "Let's Play"), ('Livestream', 'Livestream'), ('Postmortem', 'Postmortem'), ('Publication Pack', 'Publication Pack'), ('Walkthrough', 'Walkthrough'), ('Misc', 'Misc.')], help_text='Categorization of the article.', max_length=50)),
                ('content', models.TextField(default='', help_text='Body of the article.')),
                ('css', models.TextField(blank=True, default='', help_text='Custom CSS. Must include <style></style> if set.')),
                ('schema', models.CharField(choices=[('text', 'Plaintext'), ('md', 'Markdown'), ('html', 'HTML'), ('django', 'Django'), ('80col', '80 Column Text')], default='django', help_text='Schema for the article. Used to determine parsing method.', max_length=6)),
                ('publish_date', models.DateField(default='1970-01-01', help_text='Date the article was made public on the Museum')),
                ('published', models.IntegerField(choices=[(1, 'Published'), (2, 'Upcoming'), (3, 'Unpublished'), (0, 'Removed')], default=3, help_text='Publication Status')),
                ('last_modified', models.DateTimeField(auto_now=True, help_text='Date DB entry was last modified')),
                ('last_revised', models.DateTimeField(blank=True, default=None, help_text='Date article content was last revised', null=True)),
                ('revision_details', models.TextField(blank=True, default='', help_text='Reference for revisions made to the article')),
                ('description', models.CharField(blank=True, default='', help_text='Blurb to summarize/pique interest in the article', max_length=250)),
                ('allow_comments', models.BooleanField(default=False, help_text='Add a section for Disqus comments.')),
                ('spotlight', models.BooleanField(default=True, help_text='Allow this article to be visible on the front page')),
                ('static_directory', models.CharField(blank=True, default='', help_text='Name of directory where static files for the article are stored:<br>/museum_site/static/articles/[year|unk]/[static_directory]', max_length=120)),
                ('secret', models.CharField(blank=True, default='', help_text='Per-article key to allow non-patrons to read unpublished articles', max_length=12)),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, help_text='The name of your collection. Used to generate URL for collection.', max_length=120)),
                ('slug', models.SlugField(editable=False, help_text='Unique idenifier for collection', max_length=80, unique=True)),
                ('description', models.TextField(blank=True, default='', help_text='Description of collection. Markdown supported.')),
                ('visibility', models.IntegerField(choices=[(0, 'Removed'), (1, 'Private'), (2, 'Unlisted'), (3, 'Public')], default=1, help_text='Permissions to access your collection. Collections with any associated files will not be displayed even if they are marked public.')),
                ('created', models.DateField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('item_count', models.IntegerField(default=0, editable=False)),
                ('short_description', models.CharField(blank=True, default='', help_text='A short description of the collection displayed when browsing collections. Plain text only.', max_length=250)),
                ('default_sort', models.CharField(choices=[('manual', 'Manual Order'), ('title', 'Title'), ('author', 'Author'), ('company', 'Company'), ('rating', 'Rating'), ('release', 'Release Date (Newest)'), ('-release', 'Release Date (Oldest)')], default='manual', help_text='The default sorting method when viewing this collection\'s contents. Set to "Manual Order" to display contents in an arbitrary order of your choosing.', max_length=20)),
            ],
            options={
                'ordering': ['-modified'],
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, help_text='Company Name', max_length=120)),
                ('slug', models.SlugField(editable=False, max_length=120)),
            ],
        ),
        migrations.CreateModel(
            name='Content',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, editable=False, help_text='Filename', max_length=120)),
                ('path', models.CharField(db_index=True, editable=False, help_text='File Path', max_length=120)),
                ('ext', models.CharField(blank=True, db_index=True, editable=False, help_text='File Extension', max_length=120)),
                ('mod_date', models.DateTimeField(default=None, help_text='File modification datetime')),
                ('directory', models.BooleanField(default=False)),
                ('crc32', models.CharField(editable=False, help_text="File's CRC32", max_length=12)),
                ('size', models.IntegerField(editable=False, help_text='File size in bytes')),
            ],
        ),
        migrations.CreateModel(
            name='Detail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=20)),
                ('description', models.TextField(default='')),
                ('visible', models.BooleanField(default=True)),
                ('slug', models.SlugField(editable=False, max_length=20)),
                ('category', models.CharField(choices=[('ZZT', 'ZZT'), ('SZZT', 'Super ZZT'), ('Media', 'Media'), ('Other', 'Other'), ('Hidden', 'Hidden')], default='Other', max_length=20)),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Download',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(max_length=200)),
                ('priority', models.IntegerField(default=10, editable=False)),
                ('kind', models.CharField(choices=[('itch', 'Itch.io'), ('personal', 'Personal Webpage'), ('other', 'Other')], default='zgames', max_length=100)),
                ('hosted_text', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'ordering': ['-priority'],
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('letter', models.CharField(db_index=True, editable=False, help_text='Letter used for filtering browse pages', max_length=1)),
                ('filename', models.CharField(help_text="Filename of the zip file containing this zfile's contents", max_length=50)),
                ('key', models.CharField(db_index=True, default='', help_text='Unique identifier used for URLs and filtering. Filename w/out extension', max_length=50)),
                ('size', models.IntegerField(default=0, editable=False, help_text='Size in bytes of the zip file')),
                ('title', models.CharField(help_text='Canonical name of the release', max_length=80)),
                ('author', models.CharField(help_text='Slash-separated list of (major) developers', max_length=255)),
                ('ssv_company', models.CharField(blank=True, default='', help_text='Slash-separated list of companies the zfile is published under', max_length=255)),
                ('genre', models.CharField(max_length=255)),
                ('release_date', models.DateField(blank=True, default=None, help_text="Release date of zip file's contents.", null=True)),
                ('release_source', models.CharField(blank=True, default='', help_text='Source of release date when applicable.', max_length=20)),
                ('language', models.CharField(default='en', help_text="Slash-separated list of languages required to comprehend the zip file's contents. ISO 639-1 code. List defined in constants.py", max_length=50)),
                ('description', models.TextField(blank=True, default='', help_text='Description of contents. Wrap in quotes if written by author, leave unquoted for unofficial descriptions.')),
                ('playable_boards', models.IntegerField(blank=True, default=None, help_text='(Estimated) count of boards visitable during gameplay. Set automatically. Do not adjust.', null=True)),
                ('total_boards', models.IntegerField(blank=True, default=None, help_text='Total number of boards contained in zip file. Set automatically. Do not adjust.', null=True)),
                ('archive_name', models.CharField(blank=True, default='', help_text="Identifier used on archive.org mirrors. Typically the 'zzt_' + zip name w/out extension. (ex: zzt_burgerj)", max_length=80)),
                ('screenshot', models.CharField(blank=True, default='', help_text='Filename for preview image. /static/images/screenshots/&lt;letter&gt;/&lt;screenshot&gt;', max_length=80)),
                ('file_license', models.CharField(default='Unknown', help_text='License the file is released under.', max_length=150)),
                ('license_source', models.CharField(blank=True, default='', help_text='Source of licensing information.', max_length=150)),
                ('checksum', models.CharField(blank=True, default='', help_text='md5 checksum of zip file', max_length=32)),
                ('sort_title', models.CharField(blank=True, db_index=True, default='', help_text='Autogenerated value for actual title sorting. Strips articles and pads numbers to use leading digits.', max_length=100)),
                ('review_count', models.IntegerField(default=0, editable=False, help_text='Cached number of review associated with this zip file. Set automatically. Do not adjust.')),
                ('rating', models.FloatField(blank=True, default=None, help_text='Mean score based on all reviews with scores attached.', null=True)),
                ('explicit', models.BooleanField(default=False, help_text='Boolean to mark zfile as containing explicit content.')),
                ('spotlight', models.BooleanField(default=True, help_text='Boolean to mark zfile as being suitable for display on the front page.')),
                ('can_review', models.IntegerField(choices=[(0, "Can't Review"), (1, 'Requires Approval'), (2, 'Can Review')], default=2, help_text='Choice of whether the file can be reviewed freely, pending approval, or not at all.')),
                ('publish_date', models.DateTimeField(blank=True, db_index=True, default=None, help_text='Date File was published on the Museum', null=True)),
                ('last_modified', models.DateTimeField(auto_now=True, help_text='Date DB entry was last modified')),
                ('article_count', models.IntegerField(default=0, editable=False, help_text='Cached number of articles associated with this zip file. Set automatically. Do not adjust.')),
                ('aliases', models.ManyToManyField(blank=True, default=None, to='museum_site.Alias')),
                ('articles', models.ManyToManyField(blank=True, default=None, to='museum_site.Article')),
                ('companies', models.ManyToManyField(blank=True, default=None, to='museum_site.Company')),
                ('content', models.ManyToManyField(blank=True, default=None, to='museum_site.Content')),
                ('details', models.ManyToManyField(blank=True, default=None, to='museum_site.Detail')),
                ('downloads', models.ManyToManyField(blank=True, default=None, to='museum_site.Download')),
            ],
            options={
                'ordering': ['sort_title', 'letter'],
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=80)),
                ('description', models.TextField(default='')),
                ('visible', models.BooleanField(default=True)),
                ('slug', models.SlugField(editable=False, max_length=80)),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='auth.user')),
                ('patron', models.BooleanField(default=False)),
                ('patronage', models.IntegerField(default=0)),
                ('patron_email', models.EmailField(blank=True, max_length=254, unique=True)),
                ('patron_tier', models.CharField(default=0, max_length=10)),
                ('patron_visibility', models.BooleanField(default=True)),
                ('char', models.IntegerField(default=2)),
                ('fg', models.CharField(default='white', max_length=11)),
                ('bg', models.CharField(default='darkblue', max_length=11)),
                ('site_credits_name', models.CharField(blank=True, default='', max_length=100)),
                ('stream_credits_name', models.CharField(blank=True, default='', max_length=100)),
                ('max_upload_size', models.IntegerField(default=1048576)),
                ('files_published', models.IntegerField(default=0)),
                ('pronouns', models.CharField(blank=True, max_length=50)),
                ('activation_token', models.CharField(blank=True, max_length=64)),
                ('activation_time', models.DateTimeField(blank=True, null=True)),
                ('accepted_tos', models.CharField(blank=True, max_length=10)),
                ('reset_token', models.CharField(blank=True, max_length=64)),
                ('reset_time', models.DateTimeField(blank=True, null=True)),
                ('stream_poll_nominations', models.TextField(blank=True, max_length=2000)),
                ('stream_selections', models.TextField(blank=True, max_length=2000)),
                ('closer_look_nominations', models.TextField(blank=True, max_length=2000)),
                ('guest_stream_selections', models.TextField(blank=True, max_length=2000)),
                ('closer_look_selections', models.TextField(blank=True, max_length=2000)),
                ('bkzzt_topics', models.TextField(blank=True, max_length=2000)),
            ],
        ),
        migrations.CreateModel(
            name='Scroll',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.IntegerField()),
                ('content', models.TextField(default='', help_text='Lines starting with @ will be skipped. Initial whitespace is trimmed by DB, so an extra @ line is a fix.')),
                ('source', models.CharField(max_length=160)),
                ('published', models.BooleanField(default=False)),
                ('suggestion', models.CharField(blank=True, default='', max_length=500)),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Series',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=80)),
                ('slug', models.SlugField(editable=False, max_length=80)),
                ('description', models.TextField(default='')),
                ('preview', models.CharField(blank=True, default='', max_length=80)),
                ('first_entry_date', models.DateField()),
                ('last_entry_date', models.DateField()),
                ('visible', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Zeta_Config',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('executable', models.CharField(blank=True, default='zzt.zip', max_length=128)),
                ('arguments', models.CharField(blank=True, default='', max_length=128)),
                ('commands', models.CharField(blank=True, default='', max_length=256)),
                ('blink_duration', models.DecimalField(decimal_places=3, default=0.466, max_digits=6)),
                ('charset', models.CharField(default='cp437', max_length=64)),
                ('audio_buffer', models.IntegerField(default=2048)),
                ('sample_rate', models.IntegerField(default=48000)),
                ('note_delay', models.IntegerField(default=1)),
                ('volume', models.DecimalField(decimal_places=2, default=0.2, max_digits=3)),
                ('category', models.IntegerField(choices=[(0, 'Recommended'), (1, 'Alternative'), (2, 'File Specific'), (3, 'Hidden')])),
            ],
            options={
                'ordering': ('category', 'name'),
            },
        ),
        migrations.CreateModel(
            name='WoZZT_Queue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('zzt_file', models.CharField(max_length=80)),
                ('board', models.IntegerField()),
                ('board_name', models.CharField(default='', max_length=50)),
                ('dark', models.BooleanField(default=False)),
                ('zap', models.BooleanField(default=False)),
                ('shot_limit', models.IntegerField(default=255)),
                ('time_limit', models.IntegerField(default=0)),
                ('uuid', models.CharField(max_length=36)),
                ('priority', models.IntegerField(default=10, help_text='Higher priority is used first')),
                ('category', models.CharField(default='wozzt', max_length=32)),
                ('file', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='museum_site.file')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Upload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, help_text='Date upload occurred')),
                ('edit_token', models.CharField(max_length=16)),
                ('ip', models.GenericIPAddressField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('announced', models.BooleanField(default=False)),
                ('file', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='museum_site.file')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('author', models.CharField(max_length=50)),
                ('content', models.TextField()),
                ('rating', models.FloatField(default=5.0)),
                ('date', models.DateField()),
                ('ip', models.GenericIPAddressField(blank=True, null=True)),
                ('approved', models.BooleanField(default=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('zfile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='museum_site.file')),
            ],
            options={
                'ordering': ['-date', '-id'],
            },
        ),
        migrations.AddField(
            model_name='file',
            name='genres',
            field=models.ManyToManyField(blank=True, default=None, to='museum_site.Genre'),
        ),
        migrations.AddField(
            model_name='file',
            name='zeta_config',
            field=models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.SET_NULL, to='museum_site.zeta_config'),
        ),
        migrations.CreateModel(
            name='Collection_Entry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collection_description', models.TextField(blank=True, default='', help_text='Optional description for the file as part of the collection. Markdown supported.')),
                ('order', models.IntegerField(db_index=True, default=1)),
                ('collection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='museum_site.collection')),
                ('zfile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='museum_site.file')),
            ],
            options={
                'ordering': ['order', 'id'],
            },
        ),
        migrations.AddField(
            model_name='collection',
            name='contents',
            field=models.ManyToManyField(through='museum_site.Collection_Entry', to='museum_site.File'),
        ),
        migrations.AddField(
            model_name='collection',
            name='preview_image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='museum_site.file'),
        ),
        migrations.AddField(
            model_name='collection',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='article',
            name='series',
            field=models.ManyToManyField(blank=True, default=None, to='museum_site.Series'),
        ),
    ]
